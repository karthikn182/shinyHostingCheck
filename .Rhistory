26730/15
1782*12
1782*3
28954-5346
23608-2500
fact(5)
factorial(5)
?for
chk <- data.frame(x=rep(0,50),y=rep(0,50))
View(chk)
for i in c(1:50)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
}
for (i in 1:50)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
}
View(chk)
chk$z <- 0
if (chk$x > chk$y){
chk$z <- 'power'
}else{
chk$z <- 'fact'
}
chk <- data.frame(x=rep(0,50),y=rep(0,50))
chk$z <- 0
for (i in 1:50)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
View(chk)
chk$ratio <- chk$x/chk$y
View(chk)
sum(chk$ratio)
chk <- data.frame(x=rep(0,50),y=rep(0,50))
chk$z <- 0
for (i in 1:500)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
limit <- 500
chk <- data.frame(x=rep(0,limit),y=rep(0,limit))
chk$z <- 0
for (i in 1:limit)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
warnings()
View(chk)
limit <- 150
chk <- data.frame(x=rep(0,limit),y=rep(0,limit))
chk$z <- 0
for (i in 1:limit)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
limit <- 170
chk <- data.frame(x=rep(0,limit),y=rep(0,limit))
chk$z <- 0
for (i in 1:limit)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
limit <- 350
chk <- data.frame(x=rep(0,limit),y=rep(0,limit))
chk$z <- 0
for (i in 1:limit)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
limit <- 10
chk <- data.frame(x=rep(0,limit),y=rep(0,limit))
chk$z <- 0
for (i in 1:limit)
{
chk$x[i] <- 3^(i)
chk$y[i] <- factorial(i)
if (chk$x[i] > chk$y[i]){
chk$z[i] <- 'power'
}else{
chk$z[i] <- 'fact'
}
}
chk$ratio <- chk$x/chk$y
sum(chk$ratio)
View(chk)
sum(chk$ratio[1:6])
a <- (0.5^5)*10
b <- 5*(0.2)*(0.8^4)
c <- 10*(0.3^2)*(0.7^3)
a+b+c
a*b*c
(0.7^3)*(0.3^2) + (0.7^4)*(0.3)+(0.7^5)
install.packages('Shiny')
install.packages('Shiny')
install.packages('shiny')
library(shiny)
e
ln(1)
log(1)
exp
exp^1
exp(1)
exp(1/3)-1
exp(1/3)
exp(3)
exp(3)-1
a <- 1 - (0.95^52) - (52*(0.95^51)*0.5)
a
a <-(0.95^52) - (52*(0.95^51)*0.5)
b <- 26*51
b*(0.05*0.05)*(0.95^50)
a <-(0.95^52) + (52*(0.95^51)*0.5)
a <- (0.95^52)
a <-(0.95^52) + (52*(0.95^51)*0.05)
52*(0.05)*(0.95^51)
den <- (365^100)
num <- 0
num <- 1
for(i in (365:266))
{
num <- num*i
}
num/den
1-(num/den)
den <- (365^365)
a <- 5*(0.7)*(0.3^4)
b <- 10*(0.7^2)*(0.3^3)
1- (a+b)
a <- 5*(0.5^5)
b <- 10*(0.2^2)*(0.8^3)
c <- 10*(0.3^2)*(0.7^3)
a+b+c
5500*5.4
sqrt(1.5)
a <- 2.6*2.6
b <- 9
c <- 3.4*3.4
a+b+c
a+b+c-27
(a+b+c-27)/3
a <- (0.3^10)
b <- (0.5^10)
c <- (0.7^10)
a + b + c
(a + b + c)/3
install.packages('twitteR')
library("twitteR", lib.loc="~/R/win-library/3.2")
insatll.packages('sentiment')
install.packages('sentiment')
some_tweets = searchTwitter("byc", n=1500, lang="en")
tweets <- userTimeline("RDataMining", n = 3200)
install.packages('ROAuth')
install.packages('dplyr')
library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
download.file(url='http://curl.haxx.se/ca/cacert.pem', destfile='cacert.pem')
reqURL <- 'https://api.twitter.com/oauth/request_token'
accessURL <- 'https://api.twitter.com/oauth/access_token'
authURL <- 'https://api.twitter.com/oauth/authorize'
consumerKey<- 'mojok91'
consumerSecret <- 'manoj123'
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file('CurlSSL', 'http://curl.haxx.se/ca/cacert.pem', package = 'RCurl'))
Cred$handshake(cainfo = system.file('CurlSSL', 'cacert.pem', package = 'RCurl'))
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey='mojok91',
consumerSecret='manoj123',
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
rm(list=ls())
library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey=api_key,
consumerSecret='mojok91',
requestURL='manoj123',
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey=api_key,
consumerSecret='mojok91',
requestURL='manoj123',
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey='mojok91',
consumerSecret='manoj123',
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey="UFnBlfCvj8OrlQiHNeeUy8813",
consumerSecret="P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m",
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
rm(list=ls())
library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey="UFnBlfCvj8OrlQiHNeeUy8813",
consumerSecret="P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m",
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
?setup_twitter_oauth
setup_twitter_oauth("UFnBlfCvj8OrlQiHNeeUy8813", "P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m", access_token=0145083, access_secret=NULL)
install.packages('base64enc')
setup_twitter_oauth("UFnBlfCvj8OrlQiHNeeUy8813", "P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m", access_token=0145083, access_secret=NULL)
rm(list=ls())
library(twitteR)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
TwitterOAuth<-function(){
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
twitCred <- OAuthFactory$new(consumerKey="UFnBlfCvj8OrlQiHNeeUy8813",
consumerSecret="P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m",
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
}
TwitterOAuth()
setup_twitter_oauth("UFnBlfCvj8OrlQiHNeeUy8813", "P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m", access_token=4681275, access_secret=NULL)
setup_twitter_oauth("UFnBlfCvj8OrlQiHNeeUy8813", "P1D2mKS17gyP55eRkhmPndXsPwqcYj6C7TTeUgBhy55Bf8gN0m", access_token=NULL, access_secret=4681275)
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(ggmaps)
library("ggmap", lib.loc="~/R/win-library/3.2")
chicago <- get_map(location = 'nyc', zoom = 11)
ggmap(chicago)
nyc <- get_map(location = 'nyc', zoom = 11)
nyc <- get_map(location = 'nyc', zoom = 20)
nyc <- get_map(location = 'nyc', zoom = 20)
ggmap(nyc)
nyc <- get_map(location = 'nyc', zoom = 11)
ggmap(nyc)
setwd('P:\\School\\Data Science Hackathon\\shiny attempt')
data <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
View(data)
rm(list=ls())
setwd('P:\\School\\Data Science Hackathon\\shiny attempt')
data <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
nyc <- get_map(location = 'nyc', zoom = 11)
ggmap(nyc) + geom_tile(data = data, aes(x = longitud, y = latitude, alpha = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
rm(list=ls())
setwd('P:\\School\\Data Science Hackathon\\shiny attempt')
data <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
nyc <- get_map(location = 'nyc', zoom = 11)
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, alpha = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
?geom_tile
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, size = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
View(data)
class(data$score)
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = score),
scale_fill_gradient(low="green", high="red"))
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = score),
scale_fill_gradient(low="green", high="red")) + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = score),
scale_fill_gradient(low="green", high="red") + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
)
View(data)
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = (score*100)),
scale_fill_gradient(low="green", high="red") + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = (score*100)),
scale_fill_gradient(low="green", high="red") + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
)
min(data$longitude)
max(data$longitude)
max(data$latitude)
min(data$latitude)
hist(data$score)
ggmap(nyc) + geom_tile(data = data, aes(x = longitude, y = latitude, fill = (score+100)),
scale_fill_gradient(low="green", high="red") + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
)
p <- ggmap(nyc)
p
input <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
p + geom_tile(input, aes(x = longitude, y = latitude, fill = score))
p <- ggmap(nyc)
p + geom_tile(input, aes(x = longitude, y = latitude, fill = score))
p <- ggmap(nyc)
p
p + geom_tile(data = input, aes(x = longitude, y = latitude, fill = score))
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = longitude, y = latitude, fill = 100))
class(input$longitude)
install.packages('googlevis')
install.packages('googleVis')
library("googleVis", lib.loc="~/R/win-library/3.2")
input$loc <- paste(input$latitude,input$longitude,sep=":")
Geo <- gvisGeoChart(input, locationvar='loc', colorvar='score',
options=list(height=300, width=350))
Geo
plot(Geo)
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = longitude, y = latitude, fill = 100))
library(ggplot2)
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = longitude, y = latitude, fill = 100))
input$latitude <- as.factor(input$latitude)
input$longitude <- as.factor(input$longitude)
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = longitude, y = latitude, fill = 100))
rm(list=ls())
setwd('P:\\School\\Data Science Hackathon\\shiny attempt')
input <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
library(ggplot2)
nyc <- get_map(location = 'nyc', zoom = 11)
rm(list=ls())
setwd('P:\\School\\Data Science Hackathon\\shiny attempt')
input <- read.csv('partOne.csv',header = T,stringsAsFactors = F)
nyc <- get_map(location = 'nyc', zoom = 11)
View(input)
colnames(input)[17] <- 'long'
colnames(input)[18] <- 'lat'
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = long, y = lat, fill = 100))
p + geom_tile(data = input, aes(x = long, y = lat, fill = score))
colnames(input)[17] <- 'lon'
colnames(input)[18] <- 'lat'
p <- ggmap(nyc)
p + geom_tile(data = input, aes(x = lon, y = lat, fill = score))
class(input$lon)
p <- ggmap(US)
p <- ggmap(ny)
p <- ggmap(newyork)
p <- ggmap(nyc)
p
nyc
?"ggmap"
which(is.na(input$lon))
which(is.na(input$lat))
summary(input)
p <- ggmap(nyc)
p
locationCrimes <- as.data.frame(table(input$lon, input$lat))
View(locationCrimes)
mapData <- aggregate(scores~lat+lon,data = input,sum)
mapData <- aggregate(score~lat+lon,data = input,sum)
View(mapData)
mapData <- aggregate(score~lon+lat,data = input,sum)
names(mapData) <- c('long', 'lat', 'Frequency')
View(mapData)
class(mapData$long)
View(mapData)
class(mapData$lat)
class(mapData$score)
mapData <- aggregate(score~lon+lat,data = input,sum)
names(mapData) <- c('long', 'lat', 'score')
mapData <- subset(mapData, Freq > 0)
mapData <- subset(mapData, score > 0)
View(mapData)
p <- ggmap(nyc)
ggmap(nyc) + geom_tile(data = mapData, aes(x = long, y = lat, alpha = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
View(mapData)
nyc <- get_map(location = 'nyc', zoom = 11,maptype = 'roadmap')
p <- ggmap(nyc)
p
ggmap(nyc) + geom_tile(data = mapData, aes(x = long, y = lat, alpha = score),
fill = 'red') + theme(axis.title.y = element_blank(), axis.title.x = element_blank())
p <- ggplot()
nycD <- read.csv('nycPoly.csv',header = T,stringsAsFactors = F)
View(nycD)
p <- ggplot()
p <- p + geom_polygon( data=data, aes(x=long, y=lat, group = group),colour="white", fill="#d3d3d3" )
p <- p + geom_polygon( data=nycD, aes(x=long, y=lat, group = group),colour="white", fill="#d3d3d3" )
p
nycDO <- nycD[which(nycD$subregion %in% c('manhattan','staten island'))]
nycDO <- nycD[which(nycD$subregion %in% c('manhattan','staten island')),]
p <- ggplot()
p <- p + geom_polygon( data=nycDO, aes(x=long, y=lat, group = group),colour="white", fill="#d3d3d3" )
p
